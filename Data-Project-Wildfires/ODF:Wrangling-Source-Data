/*
The data obtained from the ODF website was messy and not formatted for csv or sql. This required some wrangling and cleaning.

Key Difficiencies Included:
-The report date column wasn't in date format.
-The previously garbled longitude and latitude columns ie '46ï¿½ï¿½8'ï¿½53.45' needed cleaning and conversion to float.
-The columns name format needed to be standardized. Some needed to be dropped as they were not pertinent.
-A column for readability of the fuel model codes needed to be created.
*/

--First, the column names needed to be standardized. Also, as the column Fire Number wasn't standardized, and was both INT and VARCHAR in format, I dropped it from the table.

ALTER TABLE or_fires
DROP COLUMN "Fire Number";
ALTER TABLE or_fires
RENAME COLUMN "ODF Acres" TO odf_acres;
ALTER TABLE or_fires 
RENAME COLUMN "Fire Name" TO fire_name;
ALTER TABLE or_fires
RENAME COLUMN "Report Date" TO report_date;
ALTER TABLE or_fires
RENAME COLUMN "Fire Year" TO fire_year;
ALTER TABLE or_fires
RENAME COLUMN "Fuel Model" TO fuel_model;
ALTER TABLE or_fires
RENAME COLUMN "Total Acres" TO total_acres;
ALTER TABLE or_fires
RENAME "General Cause" TO general_cause; 

-- My workflow was to create a new dummy table to base the final table off of; a lot faster than importing the data again if an alteration failed.

CREATE TABLE new_dummy
AS TABLE or_fires_output;

--The report_date column was struggling to be cast in an insert statement. I needed to set the column as null when there was an empty string present.

UPDATE new_dummy 
SET report_date = NULL 
WHERE CHAR_LENGTH(report_date)=0;

/* 
Down the road I will need to create new columns that have been transformed then join them with columns in the existing new_dummy table.
This requires
- a new append table
- a matching id column to facillitate the join
*/

CREATE TABLE append
(id SERIAL NOT NULL,
latitude FLOAT,
longitude FLOAT,
fuel_descr VARCHAR,
report_date DATE);

--One id column has been created. At is set to not null it will auto-populate on insert.

-- Now the new_dummy table needs a matching id column. 

ALTER TABLE new_dummy
ADD COLUMN id SERIAL NOT NULL;

--This column too needs no insert.

--Now we need to insert into the append table the treated data obtained from functions

insert into append (latitude, longitude, fuel_descr, report_date)
select 
		case when
			(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',1)='') or
 			(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',2) = '') then null
		when split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',3) = '' then
			(cast(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',1) as float8) 
			+ cast(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',2) as float8)/60)
		else
			(cast(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',1) as float8) 
			+ cast(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',2) as float8)/60 
			+ cast(split_part(regexp_replace(latitude, '[ï¿½ï'']+',';','g'),';',3) as float8)/3600 
		) end,
		
		case when  
			(split_part(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',1)='') or
 			(split_part(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',2) = '') then null
		when split_part(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',3) = '' then
			(cast(split_part(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',1) as float8) 
			+ cast(split_part(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',2) as float8)/60)
		else
			(CAST(SPLIT_PART(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',1) as float8) 
			+ CAST(sPLIT_PART(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',2) as float8)/60 
			+ CAST(SPLIT_PART(regexp_replace(longitude, '[ï¿½ï'']+',';','g'),';',3) as float8)/3600 
		) END,
		CASE 
			WHEN fuel_model = 'X' THEN 'non-wildland fuel'
			WHEN fuel_model = 'U' THEN 'closed canopy pine' 
			WHEN fuel_model = 'T' THEN 'sagebrush medium-dense'
			WHEN fuel_model = 'R' THEN 'hardwood summer'
			WHEN fuel_model = 'L' THEN 'grass perenial' 
			WHEN fuel_model = 'K' THEN 'slash thining'
			WHEN fuel_model = 'J' THEN 'slash medium'
			WHEN fuel_model = 'I' THEN 'slash heavy'
			WHEN fuel_model = 'H' THEN 'conifer secondary'
			WHEN fuel_model = 'G' THEN 'conifer old growth'
			WHEN fuel_model = 'F' THEN 'dense brush' 
			WHEN fuel_model = 'C' THEN 'open pine grass under'
			WHEN fuel_model = 'B' THEN 'chaparal'
			WHEN fuel_model = 'A' THEN 'annual grasses' 
			END,
			
		CAST(report_date as DATE) 
		
	from new_dummy; 
