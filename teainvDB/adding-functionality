
--Lookup id in teainv for easy links to drinklog/tastingnotes.

create or replace function search_tea (tea varchar)

returns table (id int, tname varchar)
language plpgsql
as 
$func$
begin
	return QUERY
	select t.id, t.tname from teainv as t
	where upper(t.tname) like upper('%' || tea|| '%');
end
$func$
;
--IE. select * from search_tea('Fu');



--Quick Analysis of categories.

create or replace function cat_highest_price(cat varchar)

returns table (category varchar, average_cents_per_gram numeric)
language plpgsql
as 
$func$
begin
	if (cat = 'cat')
	then return QUERY 
			select tc.category, SUM((t.p_g*st_weight))/SUM(st_weight) as average_cents_per_gram from teainv as t 
			join teacat as tc on t.catid = tc.id
			group by tc.category
			order by average_cents_per_gram desc;
	end if;
	if (cat = 'subcat')
		then return QUERY
			select ts.subcategory, SUM((t.p_g*st_weight))/SUM(st_weight) as average_cents_per_gram from teainv as t 
			join teasubcat as ts on t.subcatid = ts.id
			group by ts.sucategory
			order by average_cents_per_gram desc;
	end if;
	if (cat = 'ven')
		then return QUERY
			select tv.vendor, SUM((t.p_g*st_weight))/SUM(st_weight) as average_cents_per_gram from teainv as t 
			join vendors as tv on t.vid = tv.id
			group by tv.vendor
			order by average_cents_per_gram desc
			;
	end if;
end;
$func$;
--IE select * from cat_highest_price('cat');



--create a view to as a base for the full inter table data:

create or replace view full_tea_info 
as
select v.vendor, tc.category, ts.subcategory, t.tname, t.hyear, t.st_weight, 
		(t.st_weight-s.sum_drunk) as current_weight, p_g, r.rating
from teainv as t
join vendors as v on t.vid = v.id 
join teasubcat as ts on t.subcatid = ts.id 
join teacat as tc on t.catid = tc.id 
full outer join (select tid, sum(weight) as sum_drunk from drinklog group by tid) as s on s.tid = t.id
full outer join (select tid, avg(rating) as rating from drinklog group by tid) as r on r.tid = t.id
order by t.tname desc;


