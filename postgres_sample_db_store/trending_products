--This query analyzes products by how much they are trending relative to the past through an avg_order_date_from_present field. 
--It also includes product revenue and order count fields to guage relevance.

SELECT comp.prod_id,p.title, comp.w_avg_ddiff, pr.product_revenue, pr.order_count FROM 
    --a simple average won't do, as a product line feature a quantity, and the day difference needs to be weighed by the quantity of a product purchased.
    (SELECT f.prod_id,(SUM(f.day_diff*f.quantity)/sum(quantity)) AS w_avg_ddiff FROM
        (SELECT o.orderlineid, DATE_PART('day',(SELECT MAX(orderdate)::TIMESTAMP FROM orderlines) - o.orderdate::TIMESTAMP) AS day_diff, o.quantity, o.prod_id
        FROM orderlines AS o) AS f
    GROUP BY f.prod_id) AS comp 
JOIN products AS p ON p.prod_id=comp.prod_id
--joining the product revenue to provide a metric of relevance.
JOIN (select p.prod_id, SUM(p.price*o.quantity) AS product_revenue, COUNT(*) AS order_count FROM products AS p 
      JOIN orderlines AS o ON o.prod_id=p.prod_id
      group by p.prod_id) AS pr ON pr.prod_id=comp.prod_id
-The products at the top 
ORDER BY w_avg_ddiff ASC;

/*
The data is fairly chaotic due to the nature of the database as a sample db, but this query would be valuable in ordinary circumstances.
The rows at the top would be trending products that could capitalize on increased marketing. They also may be products whose inventories need to be evaluated.
However, the importance of their position in the column is only significant if their revenue is substantial. If they have not been ordered in a long period and there is an order,
it can be assumed to be happenstance rather than a phenomenon of it "trending".
*/
